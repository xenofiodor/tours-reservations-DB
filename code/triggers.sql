CREATE OR REPLACE TRIGGER TriggerDodanieRezerwacji
AFTER UPDATE ON REZERWACJE
FOR EACH ROW
BEGIN
    INSERT INTO REZERWACJE_LOG (ID_REZERWACJI, DATA, STATUS)
    VALUES (:NEW.NR_REZERWACJI, CURRENT_DATE, 'N');

    UPDATE WYCIECZKI
    SET LICZBA_WOLNYCH_MIEJSC = LICZBA_WOLNYCH_MIEJSC - 1
    WHERE ID_WYCIECZKI = :NEW.ID_WYCIECZKI;
END;

CREATE OR REPLACE TRIGGER TriggerZmianaStatusuRezerwacji
AFTER UPDATE ON REZERWACJE
FOR EACH ROW
DECLARE zmiana_miejsc INTEGER;
BEGIN
    INSERT INTO REZERWACJE_LOG (ID_REZERWACJI, DATA, STATUS)
    VALUES (:NEW.NR_REZERWACJI, CURRENT_DATE, :NEW.STATUS);

    CASE
        WHEN :NEW.STATUS = 'A'
        THEN
        zmiana_miejsc := 1;
        WHEN :OLD.STATUS = 'A'
        THEN
        zmiana_miejsc := -1;
    ELSE
        zmiana_miejsc := 0;
    END CASE;

    UPDATE WYCIECZKI
    SET LICZBA_WOLNYCH_MIEJSC = LICZBA_WOLNYCH_MIEJSC + zmiana_miejsc
    WHERE ID_WYCIECZKI = :NEW.ID_WYCIECZKI;
END;

CREATE OR REPLACE TRIGGER TriggerUsuniecieRezerwacji
BEFORE DELETE ON REZERWACJE
FOR EACH ROW
BEGIN
    RAISE_APPLICATION_ERROR(-20001, 'Nie można usunąć rezerwacji!');
END;

CREATE OR REPLACE TRIGGER TriggerZmianaLiczbyMiejsc
BEFORE UPDATE OF LICZBA_MIEJSC ON WYCIECZKI
FOR EACH ROW
BEGIN
    SELECT :OLD.LICZBA_WOLNYCH_MIEJSC +
           (:NEW.LICZBA_MIEJSC - :OLD.LICZBA_MIEJSC)
    INTO :NEW.LICZBA_WOLNYCH_MIEJSC
    FROM Dual;
END;
